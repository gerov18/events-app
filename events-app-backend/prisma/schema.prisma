// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  ORGANISER
}

enum RoleRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}


enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  firstName String
  lastName  String
  password  String? //pass is nullable for oauth users
  role      Role     @default(USER)
  googleId  String?  @unique
  createdAt DateTime 
  reservations Reservation[]
  RoleRequest RoleRequest[]
}

model Event {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String
  capacity    Int
  createdAt   DateTime 
  createdBy   Int
  creator     Organiser       @relation(fields: [createdBy], references: [id])
  reservations Reservation[]
  availableTickets Int
  price Float
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
}

model Organiser {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  name        String
  password    String
  description String?
  createdAt   DateTime @default(now())
  events      Event[]
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  events Event[]
}

model Reservation {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  createdAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  status ReservationStatus @default(CONFIRMED)
}

model RoleRequest {
  id     Int               @id @default(autoincrement())
  role   Role
  userId Int
  user   User              @relation(fields: [userId], references: [id])
  status RoleRequestStatus @default(PENDING)
}




